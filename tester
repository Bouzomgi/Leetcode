AWAY:


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        
        # #Runtime: O(n)
        # #Space: O(n)
        # curr = head
        # store = set()
        # while curr:
        #     if curr in store:
        #         return True
        #     store.add(curr)
        #     curr = curr.next
        # return False
            
        # Runtime: O(n)
#         #Space: O(1)
#         s = head
#         f = head
        
#         if not s:
#             return False
        
#         while s.next and f.next and f.next.next:
#             s = s.next
#             f = f.next.next
#             if s == f:
#                 return True            
            
#         return False












class Solution:
    def longestPalindrome(self, s: str) -> str:
        #O(n)
#         def isPalindrome(n):
#             return n == n[::-1]
        
#         maxSub = ''
#         for i in range(len(s)):
#             for j in range(i+1, len(s)+1):
#                 x = s[i:j]
#                 if isPalindrome(x) and len(x) > len(maxSub):
#                     maxSub = x
        
#         return maxSub
    
    
        tab = ([''] * len(s)) for _ in range(len(s))
        tab[0] = list(s)
        for i in range(1, len(s)):
            for j in range(i, len(s)-i):
                if s[i-1] == s[i]
